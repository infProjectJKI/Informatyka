#include <iostream>
#include <deque>

enum class PackageQueueType{
    LIFO, FIFO
};
class IPackageQueue:public IPackageStockpile{
public:
    virtual PackageQueueType getType()=0;
    virtual Package eraseElement()=0;
private:

};

class PackageQueue:IPackageQueue{
public:
    PackageQueue(PackageQueueType typesOfQueue)
    {
        _typesOfQueue = typesOfQueue;
    }
    PackageQueueType getType(){
        return _typesOfQueue;
    }
    Package eraseElement(){
        if(_typesOfQueue == PackageQueueType::FIFO )
        {
            return (Package _queue.back());
        }
        else if(_typesOfQueue == PackageQueueType::LIFO)
        {
            return (Package _queue.front());
        }
    }
private:
    PackageQueueType _typesOfQueue;
};

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
